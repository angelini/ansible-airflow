---

- name: Create group for Airflow
  group:
    name: '{{ airflow_group }}'
    gid: '{{ airflow_group_id | default(omit) }}'
    state: present

- name: Create user for Airflow
  user:
    name: '{{ airflow_user }}'
    uid: '{{ airflow_user_id | default(omit) }}'
    group: '{{ airflow_group }}'
    groups: '{{ airflow_user_groups | default(omit) }}'
    home: '{{ airflow_home }}'
  when: airflow_user != 'vagrant'

- name: Create airflow home
  file:
    path: '{{ airflow_home }}'
    state: directory
    owner: '{{ airflow_user }}'

- name: Install required Debian packages
  apt:
    pkg: '{{ item }}'
    state: present
    update_cache: yes
    cache_valid_time: 3600
  with_items: "{{ airflow_deb_packages }}"
  when: ansible_os_family == 'Debian'

- name: Install required Yum packages
  yum:
    name: '{{ item }}'
    state: present
  with_items: "{{ airflow_yum_packages }}"
  when: ansible_os_family == 'RedHat'

- debug: var=airflow_pip

- name: Install required Python packages
  pip:
    name: '{{ item }}'
    executable: '{{ airflow_pip }}'
    state: present
  with_items: "{{ airflow_required_pip_packages }}"

- name: Install required Debian packages for plugins
  apt:
    pkg: '{{ item }}'
    state: present
    update_cache: yes
    cache_valid_time: 3600
  with_flattened: "{{ airflow_plugins|map(attribute='required_debs')|list }}"
  when: ansible_os_family == 'Debian'

- name: Install required Yum packages for plugins
  yum:
    pkg: '{{ item }}'
    state: present
  with_flattened: "{{ airflow_plugins|map(attribute='required_yums')|list }}"
  when: ansible_os_family == 'RedHat'

- name: Install required Python packages for plugins
  pip:
    name: '{{ item }}'
    executable: '{{ airflow_pip }}'
    state: present
  with_flattened: "{{ airflow_plugins|map(attribute='required_pips')|list }}"

- name: Uninstall old airflow package
  pip:
    name: 'airflow'
    executable: '{{ airflow_pip }}'
    state: absent
  when: airflow_version is version_compare('1.8.1', '>=')

- name: Install airflow (first time installation takes a long time)
  pip:
    name: "{{ airflow_pip_package_name }}=={{ airflow_version }}"
    executable: '{{ airflow_pip }}'
    state: present

- name: Install additional Python packages
  pip:
    name: '{{ item }}'
    executable: '{{ airflow_pip }}'
    state: present
  with_items: "{{ airflow_additional_pip_packages }}"

- name: Fix Python path in Airflow scripts
  lineinfile:
    dest: "{{ airflow_bin_path }}"
    regexp: '^#!.*'
    line: '#!{{ airflow_python }}'
  when: airflow_version is version_compare('1.8.0', '<')

- name: Hotfix for Docker operator in Airflow 1.7.1.3
  replace:
    dest: '{{ airflow_python_local_dist_packages }}/airflow/operators/docker_operator.py'
    regexp:  "output = json\\.loads(l)"
    replace: "output = json.loads(l.decode('utf-8'))"
  when: airflow_version is version_compare('1.8.1', '<')

- name: Install airflow plugins
  pip:
    name: '{{ airflow_pip_package_name }}[{{ item.name }}]=={{ airflow_version }}'
    executable: '{{ airflow_pip }}'
    state: present
  with_items: "{{ airflow_plugins }}"

- name: Generate Fernet key
  ferney_key:
    config_file: '{{ airflow_config }}'

- name: Setup configuration for airflow
  template:
    src: airflow.cfg.j2
    dest: '{{ airflow_config }}'
    owner: '{{ airflow_user }}'
    mode: 0640

- name: Remove incompatible DAG example (example_twitter_dag.py)
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - /usr/local/lib/python2.7/dist-packages/airflow/example_dags/example_twitter_dag.py
    - /usr/local/lib/python3.5/dist-packages/airflow/example_dags/example_twitter_dag.py

- name: Launch Airflow Initdb
  command: "{{ airflow_bin_path }} initdb"
  register: airflow_initdb_result
  environment:
    AIRFLOW_HOME: "{{ airflow_home }}"
#    PYTHONPATH: "{{ airflow_python_libraries_path }}"
  become: true
  become_user: '{{ airflow_user }}'
  changed_when: "airflow_initdb_result.rc != 0 or airflow_initdb_result.stdout.find('Running upgrade') >= 0"

- name: Launch Airflow Upgradedb
  command: "{{ airflow_bin_path }} upgradedb"
  register: airflow_upgradedb_result
  environment:
    AIRFLOW_HOME: "{{ airflow_home }}"
#    PYTHONPATH: "{{ airflow_python_libraries_path }}"
  become: true
  become_user: '{{ airflow_user }}'
  changed_when: "airflow_upgradedb_result.rc != 0 or airflow_upgradedb_result.stdout.find('Running upgrade') >= 0"

- name: Generate the database configuration script
  template:
    src: airflow_db_config.py.j2
    dest: '{{ airflow_home }}/airflow_db_config.py'
    owner: '{{ airflow_user }}'
    group: '{{ airflow_group }}'
    mode: 0740

- name: Setup configuration for Airflow database
  command: "{{ airflow_home }}/airflow_db_config.py"
  register: airflow_db_config_result
  environment:
    AIRFLOW_HOME: "{{ airflow_home }}"
#    PYTHONPATH: "{{ airflow_python_libraries_path }}"
  become: true
  become_user: "{{ airflow_user }}"
  changed_when: "airflow_db_config_result.rc != 0 or airflow_db_config_result.stdout.find('Creating') >= 0"

- name: Define user in .gitconfig
  ini_file:
    dest: '{{ airflow_home }}/.gitconfig'
    section: user
    option: '{{ item.option }}'
    value: '{{ item.value }}'
    owner: '{{ airflow_user }}'
    group: '{{ airflow_group }}'
    mode: 0644
    backup: yes
  with_items:
    - { option: 'email', value: "airflow@{{ ansible_fqdn }}" }
    - { option: 'name', value: 'Airflow' }
  when: airflow_scripts|length > 0
  tags:
    - airflow_scripts

- name: Create parent directories for Airflow scripts
  file:
    state: 'directory'
    path: "{{ item.dest }}"
    owner: '{{ airflow_user }}'
    group: '{{ airflow_group }}'
    recurse: yes
  with_items: "{{ airflow_scripts }}"
  become: yes
  tags:
    - airflow_scripts

- name: Install Airflow scripts
  git:
    repo: '{{ item.url }}'
    version: "{{ item.version | default('latest') }}"
    verify_commit: "{{ item.verify_commit | default(False) }}"
    key_file: "{{ item.key_file | default(None) }}"
    dest: '{{ item.dest }}'
    force: yes
    update: yes
  with_items: "{{ airflow_scripts }}"
  become: yes
  become_user: "{{ airflow_user }}"
  tags:
    - airflow_scripts

- name: Complete installation of Airflow scripts
  command: >
    {{ item.post_installation_script }}
  args:
    chdir: '{{ item.dest }}'
  when: item.post_installation_script is defined and item.post_installation_script
  with_items: "{{ airflow_scripts }}"
  become: yes
  become_user: "{{ airflow_user }}"
  tags:
    - airflow_scripts

- name: Create additional work directories for Airflow and its DAGs
  file:
    path: '{{ item }}'
    state: directory
    owner: '{{ airflow_user }}'
    group: '{{ airflow_group }}'
    mode: 0750
  with_items: '{{ airflow_work_dirs }}'

- include_tasks: marathon.yml
  when: airflow_startup == 'marathon'
