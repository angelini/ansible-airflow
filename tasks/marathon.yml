---

# Startup Airflow using Marathon

- name: Wait for Marathon
  include_tasks: "{{ airflow_path_to_lib_role }}/marathon-app/tasks/wait-for-marathon.yml"
  vars:
    uri: "{{ internal_marathon_url }}"

# Always remove the old web server, this server depends on the scheduler and should be installed last
- name: Remove old Airflow Webserver using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ airflow_webserver_marathon_id }}"
    state: "absent"
    wait_timeout: 600
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  when: airflow_install_master or airflow_install_agent
  tags:
  - skip_ansible_lint

- name: Remove old Airflow Scheduler using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ airflow_scheduler_marathon_id }}"
    state: "absent"
    wait_timeout: 600
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  when: airflow_install_agent
  tags:
  - skip_ansible_lint

- name: Generate health check command for Airflow Scheduler
  template:
    src: 'check-scheduler-health.sh.j2'
    dest: "{{ airflow_home }}/check-scheduler-health.sh"
    owner: "{{ airflow_user }}"
    group: "{{ airflow_group }}"
    mode: 0755

- name: Launch Airflow Scheduler using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ airflow_scheduler_marathon_id }}"
    state: "present"
    command: "{{ airflow_bin_path }} scheduler"
    env:
      HOME: "{{ airflow_home }}"
      AIRFLOW_HOME: "{{ airflow_home }}"
#      PYTHONPATH: "{{ airflow_python_libraries_path }}"
    user: "{{ airflow_user }}"
    instances: 1
    cpus: '{{ airflow_scheduler_cpus }}'
    mem: '{{ airflow_scheduler_mem }}'
    ports: []
    require_ports: false
    constraints: '{{ airflow_scheduler_marathon_constraints }}'
    dependencies: '{{ airflow_scheduler_marathon_dependencies }}'
    executor: ""
    wait_timeout: 600
    health_checks:
      - protocol: COMMAND
        command:
          value: "{{ airflow_home }}/check-scheduler-health.sh"
        gracePeriodSeconds: 300
        intervalSeconds: 60
        timeoutSeconds: 20
        maxConsecutiveFailures: 2
    upgrade_strategy_minimum_health_capacity: 0.0
    upgrade_strategy_maximum_over_capacity: 0.0
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  when: airflow_install_agent
  tags:
  - skip_ansible_lint

- name: Launch Airflow Webserver using Marathon
  marathon_app:
    uri: "{{ internal_marathon_url }}"
    id: "{{ airflow_webserver_marathon_id }}"
    state: "present"
    command: "{{ airflow_bin_path }} webserver"
    env:
      HOME: "{{ airflow_home }}"
      AIRFLOW_HOME: "{{ airflow_home }}"
#      PYTHONPATH: "{{ airflow_python_libraries_path }}"
    user: "{{ airflow_user }}"
    instances: 1
    cpus: '{{ airflow_webserver_cpus }}'
    mem: '{{ airflow_webserver_mem }}'
    port_definitions:
      - name: 'http-admin'
        protocol: 'tcp'
        port: '{{ airflow_web_server_port }}'
    require_ports: true
    constraints: '{{ airflow_webserver_marathon_constraints }}'
    dependencies: '{{ airflow_webserver_marathon_dependencies }}'
    executor: ""
    wait_timeout: 600
    health_checks:
      - protocol: "{% if marathon_version is version('1.4', '>=') %}MESOS_HTTP{% else %}HTTP{% endif %}"
        portIndex: 0
        path: "/"
        gracePeriodSeconds: 300
        intervalSeconds: 60
        timeoutSeconds: 20
        maxConsecutiveFailures: 2
    upgrade_strategy_minimum_health_capacity: 0.0
    upgrade_strategy_maximum_over_capacity: 0.0
  async: 600
  poll: 1
  delegate_to: "{{ groups['control'][0] }}"
  when: airflow_install_master
  tags:
  - skip_ansible_lint
